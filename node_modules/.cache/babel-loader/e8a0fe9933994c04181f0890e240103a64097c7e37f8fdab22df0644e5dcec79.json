{"ast":null,"code":"import { createSlice, createAsyncThunk, configureStore, combineReducers } from \"@reduxjs/toolkit\";\nimport { persistReducer, persistStore } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n\n// Fetch balance from API\nexport const fetchBalance = createAsyncThunk('dashboard/fetchBalance', async () => {\n  const response = await fetch('https://api.example.com/balance'); // Replace with a valid API URL\n  const data = await response.json();\n  return data.balance;\n});\n// Fetching cards from Api\nexport const fetchCardsData = createAsyncThunk('dashboard/fetchCardsData', async () => {\n  const response = await fetch('https/f/as/ffff');\n  const data = await response.json();\n  return data.cards;\n});\n//Fetching Announcements from Api\nexport const fetchAnnouncements = createAsyncThunk('dashboard/fetchAnnouncements', async () => {\n  const response = await fetch('https/www.card.com');\n  const data = await response.json();\n  return data.Announcements;\n});\n// Fetching Latest News From APi\nexport const fetchlatestNews = createAsyncThunk('dashboard/fetchlatestNews', async () => {\n  const response = await fetch('https/www.latestnes.com');\n  const data = await response.json();\n  return data.latestNews;\n});\n// Fetching Table From Api\nexport const fetchTableData = createAsyncThunk('dashboard/fetchTableData', async () => {\n  const response = await fetch('https/www/latest.com');\n  const data = await response.json();\n  return data.tableData;\n});\n// Initial state\nconst initialState = {\n  balance: 0,\n  status: 'idle',\n  error: null,\n  cards: [],\n  tableData: [],\n  Announcements: [],\n  latestNews: []\n};\n// Create dashboard slice\nconst dashboardSlice = createSlice({\n  name: 'dashboard',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchBalance.pending, state => {\n      state.status = 'loading...';\n    }).addCase(fetchBalance.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.balance = action.payload;\n    }).addCase(fetchBalance.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }).addCase(fetchCardsData.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.cards = action.payload;\n    }).addCase(fetchTableData.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.tableData = action.payload;\n    }).addCase(fetchAnnouncements.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.Announcements = action.payload;\n    }).addCase(fetchlatestNews.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.latestNews = action.payload;\n    });\n  }\n});\n\n// Login logout functionality\nconst initialState1 = {\n  isAuthenticated: false\n  // token: null,\n  // user: null,\n};\n// slice for Auth functionality\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState: initialState1,\n  reducers: {\n    loginSuccess(state, action) {\n      state.isAuthenticated = true;\n      // state.token= action.payload.token;\n      // state.user=action.payload.user;\n    },\n    logout(state) {\n      state.isAuthenticated = false;\n      // state.token= null;\n      // state.user= null;\n    }\n  }\n});\nconst rootReducer = combineReducers({\n  dashboard: dashboardSlice.reducer,\n  auth: authSlice.reducer\n});\nconst persistConfig = {\n  key: 'root',\n  storage,\n  // Use localStorage\n  version: 1 // Version\n};\nconst persestedReducer = persistReducer(persistConfig, rootReducer);\n\n// Configure store\nexport const store = configureStore({\n  reducer: persestedReducer,\n  middleware: getDefaultMiddleware => getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: ['persist/PERSIST'] // Tell Redux to ignore the persist/persisted actions\n    }\n  })\n});\nexport const persistor = persistStore(store);\nexport const dashboardActions = dashboardSlice.actions;\nexport const authActions = authSlice.actions;","map":{"version":3,"names":["createSlice","createAsyncThunk","configureStore","combineReducers","persistReducer","persistStore","storage","fetchBalance","response","fetch","data","json","balance","fetchCardsData","cards","fetchAnnouncements","Announcements","fetchlatestNews","latestNews","fetchTableData","tableData","initialState","status","error","dashboardSlice","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","message","initialState1","isAuthenticated","authSlice","loginSuccess","logout","rootReducer","dashboard","reducer","auth","persistConfig","key","version","persestedReducer","store","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","persistor","dashboardActions","actions","authActions"],"sources":["C:/Users/pc/Desktop/React workspace/eternal-app/src/Redux/Store.js"],"sourcesContent":["import { createSlice, createAsyncThunk, configureStore, combineReducers } from \"@reduxjs/toolkit\";\r\nimport { persistReducer, persistStore } from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\n\r\n// Fetch balance from API\r\nexport const fetchBalance = createAsyncThunk('dashboard/fetchBalance', async () => {\r\n    const response = await fetch('https://api.example.com/balance'); // Replace with a valid API URL\r\n    const data = await response.json();\r\n    return data.balance;\r\n});\r\n// Fetching cards from Api\r\nexport  const fetchCardsData =createAsyncThunk('dashboard/fetchCardsData',async ()=>{\r\n    const response = await fetch('https/f/as/ffff');\r\n  \r\n    const data = await response.json();\r\n    return data.cards;\r\n});\r\n//Fetching Announcements from Api\r\nexport const fetchAnnouncements =createAsyncThunk('dashboard/fetchAnnouncements', async()=>{\r\n    const response = await fetch('https/www.card.com');\r\n    const data = await response.json();\r\n    return data.Announcements;\r\n});\r\n// Fetching Latest News From APi\r\nexport const fetchlatestNews =createAsyncThunk('dashboard/fetchlatestNews', async()=>{\r\n    const response = await fetch('https/www.latestnes.com');\r\n    const data = await response.json();\r\n    return data.latestNews;\r\n});\r\n// Fetching Table From Api\r\nexport const fetchTableData =createAsyncThunk('dashboard/fetchTableData', async()=>{\r\n    const response = await fetch ('https/www/latest.com');\r\n    const data = await response.json();\r\n    return data.tableData\r\n})\r\n// Initial state\r\nconst initialState = {\r\n    balance: 0,\r\n    status: 'idle',\r\n    error: null,\r\n    cards:[],\r\n    tableData:[],\r\n    Announcements:[],\r\n    latestNews:[]\r\n};\r\n// Create dashboard slice\r\nconst dashboardSlice = createSlice({\r\n    name: 'dashboard',\r\n    initialState, \r\n    reducers: {},\r\n    extraReducers: (builder) => {\r\n        builder\r\n            .addCase(fetchBalance.pending, (state) => {\r\n                state.status = 'loading...';\r\n            })\r\n            .addCase(fetchBalance.fulfilled, (state, action) => {\r\n                state.status = 'succeeded';\r\n                state.balance = action.payload; \r\n            })\r\n            .addCase(fetchBalance.rejected, (state, action) => {\r\n                state.status = 'failed';\r\n                state.error = action.error.message;\r\n            })\r\n            .addCase(fetchCardsData.fulfilled, (state,action)=>{\r\n             state.status ='succeeded';\r\n             state.cards = action.payload;\r\n            })\r\n            .addCase(fetchTableData.fulfilled,(state,action)=>{\r\n                state.status ='succeeded';\r\n                state.tableData = action.payload;\r\n            })\r\n            .addCase(fetchAnnouncements.fulfilled,(state,action)=>{\r\n                state.status ='succeeded';\r\n                state.Announcements =action.payload;\r\n            })\r\n            .addCase(fetchlatestNews.fulfilled,(state,action)=>{\r\n                state.status = 'succeeded';\r\n                state.latestNews = action.payload;\r\n            });\r\n    }\r\n});\r\n\r\n \r\n// Login logout functionality\r\nconst initialState1 = {\r\n    isAuthenticated: false,\r\n    // token: null,\r\n    // user: null,\r\n};\r\n// slice for Auth functionality\r\nconst authSlice = createSlice ({\r\n    name:'auth',\r\n    initialState: initialState1,\r\n    reducers:{\r\n        loginSuccess (state,action) {\r\n           state.isAuthenticated= true;\r\n            // state.token= action.payload.token;\r\n            // state.user=action.payload.user;\r\n        },\r\n        logout(state){\r\n            state.isAuthenticated=false;\r\n            // state.token= null;\r\n            // state.user= null;\r\n        }       \r\n    }\r\n})\r\n\r\nconst rootReducer = combineReducers({\r\n    dashboard: dashboardSlice.reducer ,\r\n    auth: authSlice.reducer\r\n})\r\n  const persistConfig = {\r\n    key: 'root', \r\n    storage,          // Use localStorage\r\n    version: 1,      // Version\r\n  };\r\n  const persestedReducer = persistReducer(persistConfig,rootReducer)\r\n\r\n// Configure store\r\nexport const store = configureStore({\r\n    reducer: persestedReducer,\r\n    middleware: (getDefaultMiddleware) =>\r\n        getDefaultMiddleware({\r\n          serializableCheck: {\r\n            ignoredActions: ['persist/PERSIST'], // Tell Redux to ignore the persist/persisted actions\r\n          },\r\n        }),   \r\n});\r\nexport const persistor = persistStore(store)\r\nexport const dashboardActions = dashboardSlice.actions\r\nexport const authActions = authSlice.actions\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}